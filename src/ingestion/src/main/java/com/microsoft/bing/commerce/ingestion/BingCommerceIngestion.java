/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.commerce.ingestion;

import com.microsoft.bing.commerce.ingestion.models.DeleteDocumentsResponse;
import com.microsoft.bing.commerce.ingestion.models.Index;
import com.microsoft.bing.commerce.ingestion.models.IndexResponse;
import com.microsoft.bing.commerce.ingestion.models.IndexStatusResponse;
import com.microsoft.bing.commerce.ingestion.models.PushDataUpdateResponse;
import com.microsoft.bing.commerce.ingestion.models.PushUpdateStatusResponse;
import com.microsoft.bing.commerce.ingestion.models.RequestsStringSet;
import com.microsoft.bing.commerce.ingestion.models.SchemaDetectionResponse;
import com.microsoft.bing.commerce.ingestion.models.TransformationConfigResponse;
import com.microsoft.bing.commerce.ingestion.models.TransformationTryoutResponse;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for BingCommerceIngestion class.
 */
public interface BingCommerceIngestion {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https://commerce.bing.com/api/ingestion/v1";

    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse createIndex(String tenantid);

    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> createIndexAsync(String tenantid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> createIndexAsync(String tenantid);

    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> createIndexWithServiceResponseAsync(String tenantid);
    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @param body An Index object that describes the index definition to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse createIndex(String tenantid, String subscriptionId, Index body);

    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @param body An Index object that describes the index definition to add.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> createIndexAsync(String tenantid, String subscriptionId, Index body, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @param body An Index object that describes the index definition to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> createIndexAsync(String tenantid, String subscriptionId, Index body);

    /**
     * Create an index.
     * Creates a definition of the tenant's index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @param body An Index object that describes the index definition to add.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> createIndexWithServiceResponseAsync(String tenantid, String subscriptionId, Index body);

    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getAllIndexes(String tenantid);

    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getAllIndexesAsync(String tenantid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getAllIndexesAsync(String tenantid);

    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getAllIndexesWithServiceResponseAsync(String tenantid);
    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getAllIndexes(String tenantid, String subscriptionId);

    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getAllIndexesAsync(String tenantid, String subscriptionId, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getAllIndexesAsync(String tenantid, String subscriptionId);

    /**
     * Get list of index definitions.
     * Get list of index definitions that you defined for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getAllIndexesWithServiceResponseAsync(String tenantid, String subscriptionId);

    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse deleteIndex(String tenantid, String indexid);

    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> deleteIndexAsync(String tenantid, String indexid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> deleteIndexAsync(String tenantid, String indexid);

    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> deleteIndexWithServiceResponseAsync(String tenantid, String indexid);
    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse deleteIndex(String tenantid, String indexid, String subscriptionId);

    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> deleteIndexAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> deleteIndexAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Delete an index.
     * Delete an index definition along with all the catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> deleteIndexWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse updateIndex(String tenantid, String indexid);

    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> updateIndexAsync(String tenantid, String indexid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> updateIndexAsync(String tenantid, String indexid);

    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> updateIndexWithServiceResponseAsync(String tenantid, String indexid);
    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse updateIndex(String tenantid, String indexid, String subscriptionId, Index body);

    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> updateIndexAsync(String tenantid, String indexid, String subscriptionId, Index body, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> updateIndexAsync(String tenantid, String indexid, String subscriptionId, Index body);

    /**
     * Updates an index with id.
     * Update the definition for your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> updateIndexWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId, Index body);

    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getIndex(String tenantid, String indexid);

    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getIndexAsync(String tenantid, String indexid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getIndexAsync(String tenantid, String indexid);

    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getIndexWithServiceResponseAsync(String tenantid, String indexid);
    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getIndex(String tenantid, String indexid, String subscriptionId);

    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getIndexAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getIndexAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Get index definition by id.
     * Get a specific index definition for a tenant.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getIndexWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeleteDocumentsResponse object if successful.
     */
    DeleteDocumentsResponse deleteDocuments(String tenantid, String indexid);

    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DeleteDocumentsResponse> deleteDocumentsAsync(String tenantid, String indexid, final ServiceCallback<DeleteDocumentsResponse> serviceCallback);

    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeleteDocumentsResponse object
     */
    Observable<DeleteDocumentsResponse> deleteDocumentsAsync(String tenantid, String indexid);

    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeleteDocumentsResponse object
     */
    Observable<ServiceResponse<DeleteDocumentsResponse>> deleteDocumentsWithServiceResponseAsync(String tenantid, String indexid);
    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The set of document ids to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DeleteDocumentsResponse object if successful.
     */
    DeleteDocumentsResponse deleteDocuments(String tenantid, String indexid, String subscriptionId, RequestsStringSet body);

    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The set of document ids to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<DeleteDocumentsResponse> deleteDocumentsAsync(String tenantid, String indexid, String subscriptionId, RequestsStringSet body, final ServiceCallback<DeleteDocumentsResponse> serviceCallback);

    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The set of document ids to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeleteDocumentsResponse object
     */
    Observable<DeleteDocumentsResponse> deleteDocumentsAsync(String tenantid, String indexid, String subscriptionId, RequestsStringSet body);

    /**
     * Delete documents from your catalog.
     * Delete documents from your index's catalog.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param body The set of document ids to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DeleteDocumentsResponse object
     */
    Observable<ServiceResponse<DeleteDocumentsResponse>> deleteDocumentsWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId, RequestsStringSet body);

    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexStatusResponse object if successful.
     */
    IndexStatusResponse getIndexStatus(String tenantid, String indexid);

    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid, final ServiceCallback<IndexStatusResponse> serviceCallback);

    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid);

    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<ServiceResponse<IndexStatusResponse>> getIndexStatusWithServiceResponseAsync(String tenantid, String indexid);
    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexStatusResponse object if successful.
     */
    IndexStatusResponse getIndexStatus(String tenantid, String indexid, String subscriptionId);

    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<IndexStatusResponse> serviceCallback);

    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Get index status by id.
     * Get the detailed status of your index in each supported region.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<ServiceResponse<IndexStatusResponse>> getIndexStatusWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushDataUpdateResponse object if successful.
     */
    PushDataUpdateResponse pushDataUpdate(String body, String tenantid, String indexid);

    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid, final ServiceCallback<PushDataUpdateResponse> serviceCallback);

    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid);

    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<ServiceResponse<PushDataUpdateResponse>> pushDataUpdateWithServiceResponseAsync(String body, String tenantid, String indexid);
    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param notransform This disables transformation config processing if the config was uploaded for some index. It's useful when the data is already transformed and is matching the index definition. Default is `false`
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushDataUpdateResponse object if successful.
     */
    PushDataUpdateResponse pushDataUpdate(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid);

    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param notransform This disables transformation config processing if the config was uploaded for some index. It's useful when the data is already transformed and is matching the index definition. Default is `false`
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid, final ServiceCallback<PushDataUpdateResponse> serviceCallback);

    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param notransform This disables transformation config processing if the config was uploaded for some index. It's useful when the data is already transformed and is matching the index definition. Default is `false`
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid);

    /**
     * Push catalog data.
     * This method pushes updates to your your index data to Bing. This is an asynchronous process. To upload your index data to Bing, you'll send a push request that contains your index data.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param notransform This disables transformation config processing if the config was uploaded for some index. It's useful when the data is already transformed and is matching the index definition. Default is `false`
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<ServiceResponse<PushDataUpdateResponse>> pushDataUpdateWithServiceResponseAsync(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid);

    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushUpdateStatusResponse object if successful.
     */
    PushUpdateStatusResponse pushDataStatus(String tenantid, String indexid, String updateid);

    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid, final ServiceCallback<PushUpdateStatusResponse> serviceCallback);

    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid);

    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<ServiceResponse<PushUpdateStatusResponse>> pushDataStatusWithServiceResponseAsync(String tenantid, String indexid, String updateid);
    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushUpdateStatusResponse object if successful.
     */
    PushUpdateStatusResponse pushDataStatus(String tenantid, String indexid, String updateid, String subscriptionId);

    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid, String subscriptionId, final ServiceCallback<PushUpdateStatusResponse> serviceCallback);

    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid, String subscriptionId);

    /**
     * .
     * .
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param updateid An id to uniquely identify the push update request in order to be able to track it down later.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<ServiceResponse<PushUpdateStatusResponse>> pushDataStatusWithServiceResponseAsync(String tenantid, String indexid, String updateid, String subscriptionId);

    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse deleteTransformationConfig(String tenantid, String indexid);

    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid);

    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> deleteTransformationConfigWithServiceResponseAsync(String tenantid, String indexid);
    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse deleteTransformationConfig(String tenantid, String indexid, String subscriptionId);

    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Delete your index's transformation config.
     * Delete the transformation config that currently aplies to data you push to your index.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> deleteTransformationConfigWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse createOrUpdateTransformationConfig(String body, String tenantid, String indexid);

    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid);

    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> createOrUpdateTransformationConfigWithServiceResponseAsync(String body, String tenantid, String indexid);
    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse createOrUpdateTransformationConfig(String body, String tenantid, String indexid, String subscriptionId);

    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid, String subscriptionId);

    /**
     * Retrieve your current index's transformation config.
     * Retrieve the transformation config that currently applies to data you push to your index.
     *
     * @param body the String value
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> createOrUpdateTransformationConfigWithServiceResponseAsync(String body, String tenantid, String indexid, String subscriptionId);

    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse getTransformationConfig(String tenantid, String indexid);

    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid);

    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> getTransformationConfigWithServiceResponseAsync(String tenantid, String indexid);
    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse getTransformationConfig(String tenantid, String indexid, String subscriptionId);

    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Get ingestion status.
     * Track your ingestion by querying the status.
     *
     * @param tenantid The ID that uniquely identifies the tenant that the index belongs to.
     * @param indexid The ID that uniquely identifies the index definition to manage.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> getTransformationConfigWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse uploadTryOutConfig(String body);

    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> uploadTryOutConfigAsync(String body, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> uploadTryOutConfigAsync(String body);

    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> uploadTryOutConfigWithServiceResponseAsync(String body);
    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse uploadTryOutConfig(String body, String subscriptionId);

    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> uploadTryOutConfigAsync(String body, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> uploadTryOutConfigAsync(String body, String subscriptionId);

    /**
     * Create a transformation config.
     * Upload a new transformation config and set it as the transformation config that applies to data you push to your index.
     *
     * @param body the String value
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> uploadTryOutConfigWithServiceResponseAsync(String body, String subscriptionId);

    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationTryoutResponse object if successful.
     */
    TransformationTryoutResponse executeTryOutConfig(String body, String tryoutid);

    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationTryoutResponse> executeTryOutConfigAsync(String body, String tryoutid, final ServiceCallback<TransformationTryoutResponse> serviceCallback);

    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<TransformationTryoutResponse> executeTryOutConfigAsync(String body, String tryoutid);

    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<ServiceResponse<TransformationTryoutResponse>> executeTryOutConfigWithServiceResponseAsync(String body, String tryoutid);
    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationTryoutResponse object if successful.
     */
    TransformationTryoutResponse executeTryOutConfig(String body, String tryoutid, String subscriptionId);

    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @param subscriptionId Bing developer subcription id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationTryoutResponse> executeTryOutConfigAsync(String body, String tryoutid, String subscriptionId, final ServiceCallback<TransformationTryoutResponse> serviceCallback);

    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<TransformationTryoutResponse> executeTryOutConfigAsync(String body, String tryoutid, String subscriptionId);

    /**
     * Upload a trytout config.
     * Upload a transformation config that you can use to test data transformation on the cloud.
     *
     * @param body the String value
     * @param tryoutid The transformation tryout config id.
     * @param subscriptionId Bing developer subcription id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<ServiceResponse<TransformationTryoutResponse>> executeTryOutConfigWithServiceResponseAsync(String body, String tryoutid, String subscriptionId);

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaDetectionResponse object if successful.
     */
    SchemaDetectionResponse detectSchema();

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaDetectionResponse> detectSchemaAsync(final ServiceCallback<SchemaDetectionResponse> serviceCallback);

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<SchemaDetectionResponse> detectSchemaAsync();

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<ServiceResponse<SchemaDetectionResponse>> detectSchemaWithServiceResponseAsync();
    /**
     *
     * @param subscriptionId Bing developer subcription id
     * @param format The push data update document format. Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaDetectionResponse object if successful.
     */
    SchemaDetectionResponse detectSchema(String subscriptionId, String format);

    /**
     *
     * @param subscriptionId Bing developer subcription id
     * @param format The push data update document format. Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaDetectionResponse> detectSchemaAsync(String subscriptionId, String format, final ServiceCallback<SchemaDetectionResponse> serviceCallback);

    /**
     *
     * @param subscriptionId Bing developer subcription id
     * @param format The push data update document format. Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<SchemaDetectionResponse> detectSchemaAsync(String subscriptionId, String format);

    /**
     *
     * @param subscriptionId Bing developer subcription id
     * @param format The push data update document format. Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<ServiceResponse<SchemaDetectionResponse>> detectSchemaWithServiceResponseAsync(String subscriptionId, String format);

}
