/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.commerce.ingestion.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contains the definition for the index. An index consists of a set of
 * documents that search operations can be performed upon.
 */
public class Index {
    /**
     * The index's name. The name must be unique per tenant, contain only ASCII
     * characters, and have a maximum length of 64 characters.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * A description of the index. The description is for the tenant's use. The
     * description must contain only ASCII characters and have a maximum length
     * of 64 characters.
     */
    @JsonProperty(value = "description")
    private String description;

    /**
     * The array of regions where the customer data will be processed and
     * served.
     */
    @JsonProperty(value = "regions")
    private List<Region> regions;

    /**
     * The type of search scenario that the user is using the index for, which
     * includes Retail, Hotel, and Document. Possible values include:
     * 'Unknown', 'Retail', 'Document', 'Hotel'.
     */
    @JsonProperty(value = "searchScenario")
    private String searchScenario;

    /**
     * The array of additional search services that the user wants to include
     * for the index, which includes Autosuggest and VisualSearch.
     */
    @JsonProperty(value = "searchServices")
    private List<String> searchServices;

    /**
     * The version for the schema of the index.
     */
    @JsonProperty(value = "schemaVersion")
    private String schemaVersion;

    /**
     * The fields that are associated with the index.
     */
    @JsonProperty(value = "fields")
    private List<IndexField> fields;

    /**
     * Get the index's name. The name must be unique per tenant, contain only ASCII characters, and have a maximum length of 64 characters.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the index's name. The name must be unique per tenant, contain only ASCII characters, and have a maximum length of 64 characters.
     *
     * @param name the name value to set
     * @return the Index object itself.
     */
    public Index withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get a description of the index. The description is for the tenant's use. The description must contain only ASCII characters and have a maximum length of 64 characters.
     *
     * @return the description value
     */
    public String description() {
        return this.description;
    }

    /**
     * Set a description of the index. The description is for the tenant's use. The description must contain only ASCII characters and have a maximum length of 64 characters.
     *
     * @param description the description value to set
     * @return the Index object itself.
     */
    public Index withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the array of regions where the customer data will be processed and served.
     *
     * @return the regions value
     */
    public List<Region> regions() {
        return this.regions;
    }

    /**
     * Set the array of regions where the customer data will be processed and served.
     *
     * @param regions the regions value to set
     * @return the Index object itself.
     */
    public Index withRegions(List<Region> regions) {
        this.regions = regions;
        return this;
    }

    /**
     * Get the type of search scenario that the user is using the index for, which includes Retail, Hotel, and Document. Possible values include: 'Unknown', 'Retail', 'Document', 'Hotel'.
     *
     * @return the searchScenario value
     */
    public String searchScenario() {
        return this.searchScenario;
    }

    /**
     * Set the type of search scenario that the user is using the index for, which includes Retail, Hotel, and Document. Possible values include: 'Unknown', 'Retail', 'Document', 'Hotel'.
     *
     * @param searchScenario the searchScenario value to set
     * @return the Index object itself.
     */
    public Index withSearchScenario(String searchScenario) {
        this.searchScenario = searchScenario;
        return this;
    }

    /**
     * Get the array of additional search services that the user wants to include for the index, which includes Autosuggest and VisualSearch.
     *
     * @return the searchServices value
     */
    public List<String> searchServices() {
        return this.searchServices;
    }

    /**
     * Set the array of additional search services that the user wants to include for the index, which includes Autosuggest and VisualSearch.
     *
     * @param searchServices the searchServices value to set
     * @return the Index object itself.
     */
    public Index withSearchServices(List<String> searchServices) {
        this.searchServices = searchServices;
        return this;
    }

    /**
     * Get the version for the schema of the index.
     *
     * @return the schemaVersion value
     */
    public String schemaVersion() {
        return this.schemaVersion;
    }

    /**
     * Set the version for the schema of the index.
     *
     * @param schemaVersion the schemaVersion value to set
     * @return the Index object itself.
     */
    public Index withSchemaVersion(String schemaVersion) {
        this.schemaVersion = schemaVersion;
        return this;
    }

    /**
     * Get the fields that are associated with the index.
     *
     * @return the fields value
     */
    public List<IndexField> fields() {
        return this.fields;
    }

    /**
     * Set the fields that are associated with the index.
     *
     * @param fields the fields value to set
     * @return the Index object itself.
     */
    public Index withFields(List<IndexField> fields) {
        this.fields = fields;
        return this;
    }

}
