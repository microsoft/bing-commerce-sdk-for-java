/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.commerce.ingestion.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contains the definition for the index field. A field represents a single
 * unit of data.
 */
public class IndexField {
    /**
     * Index field name.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * Possible values include: 'Unknown', 'String', 'Boolean', 'Number',
     * 'ProductId', 'DupId', 'StaticRank', 'Url', 'ImageUrl', 'Title',
     * 'Description', 'Category', 'Price', 'Rating', 'Brand', 'Model', 'Color',
     * 'Size', 'Material', 'Gender', 'AgeGroup', 'Array', 'Dictionary',
     * 'ExcludeFlag', 'Identifier', 'Object', 'DocumentId', 'Author',
     * 'CreatedAt', 'ModifiedAt', 'Paragraph', 'SubHeading', 'SectionHeader',
     * 'Address', 'RatingCount', 'ReviewCount', 'RatingScale', 'Amenities',
     * 'StreetAddress', 'Locality', 'SubRegion', 'AddressRegion', 'PostalCode',
     * 'PostOfficeBoxNumber', 'Country', 'CountryIso', 'Neighborhood',
     * 'OtherAreas', 'PhoneNumber', 'Barcode', 'SecondaryImageUrls'.
     */
    @JsonProperty(value = "type")
    private IndexFieldType type;

    /**
     * Enables using the field for facets and other field-based aggregations.
     */
    @JsonProperty(value = "facetable")
    private Boolean facetable;

    /**
     * Enables using the field in filter and boost conditions.
     */
    @JsonProperty(value = "filterable")
    private Boolean filterable;

    /**
     * Enables using the field values in search response.
     */
    @JsonProperty(value = "retrievable")
    private Boolean retrievable;

    /**
     * Enables text matching on the field.
     */
    @JsonProperty(value = "searchable")
    private Boolean searchable;

    /**
     * Enables sorting results by the field.
     */
    @JsonProperty(value = "sortable")
    private Boolean sortable;

    /**
     * A label to use with the field.
     */
    @JsonProperty(value = "fieldLabel")
    private String fieldLabel;

    /**
     * A child list of fields.
     */
    @JsonProperty(value = "fields")
    private List<IndexField> fields;

    /**
     * Get index field name.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set index field name.
     *
     * @param name the name value to set
     * @return the IndexField object itself.
     */
    public IndexField withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get possible values include: 'Unknown', 'String', 'Boolean', 'Number', 'ProductId', 'DupId', 'StaticRank', 'Url', 'ImageUrl', 'Title', 'Description', 'Category', 'Price', 'Rating', 'Brand', 'Model', 'Color', 'Size', 'Material', 'Gender', 'AgeGroup', 'Array', 'Dictionary', 'ExcludeFlag', 'Identifier', 'Object', 'DocumentId', 'Author', 'CreatedAt', 'ModifiedAt', 'Paragraph', 'SubHeading', 'SectionHeader', 'Address', 'RatingCount', 'ReviewCount', 'RatingScale', 'Amenities', 'StreetAddress', 'Locality', 'SubRegion', 'AddressRegion', 'PostalCode', 'PostOfficeBoxNumber', 'Country', 'CountryIso', 'Neighborhood', 'OtherAreas', 'PhoneNumber', 'Barcode', 'SecondaryImageUrls'.
     *
     * @return the type value
     */
    public IndexFieldType type() {
        return this.type;
    }

    /**
     * Set possible values include: 'Unknown', 'String', 'Boolean', 'Number', 'ProductId', 'DupId', 'StaticRank', 'Url', 'ImageUrl', 'Title', 'Description', 'Category', 'Price', 'Rating', 'Brand', 'Model', 'Color', 'Size', 'Material', 'Gender', 'AgeGroup', 'Array', 'Dictionary', 'ExcludeFlag', 'Identifier', 'Object', 'DocumentId', 'Author', 'CreatedAt', 'ModifiedAt', 'Paragraph', 'SubHeading', 'SectionHeader', 'Address', 'RatingCount', 'ReviewCount', 'RatingScale', 'Amenities', 'StreetAddress', 'Locality', 'SubRegion', 'AddressRegion', 'PostalCode', 'PostOfficeBoxNumber', 'Country', 'CountryIso', 'Neighborhood', 'OtherAreas', 'PhoneNumber', 'Barcode', 'SecondaryImageUrls'.
     *
     * @param type the type value to set
     * @return the IndexField object itself.
     */
    public IndexField withType(IndexFieldType type) {
        this.type = type;
        return this;
    }

    /**
     * Get enables using the field for facets and other field-based aggregations.
     *
     * @return the facetable value
     */
    public Boolean facetable() {
        return this.facetable;
    }

    /**
     * Set enables using the field for facets and other field-based aggregations.
     *
     * @param facetable the facetable value to set
     * @return the IndexField object itself.
     */
    public IndexField withFacetable(Boolean facetable) {
        this.facetable = facetable;
        return this;
    }

    /**
     * Get enables using the field in filter and boost conditions.
     *
     * @return the filterable value
     */
    public Boolean filterable() {
        return this.filterable;
    }

    /**
     * Set enables using the field in filter and boost conditions.
     *
     * @param filterable the filterable value to set
     * @return the IndexField object itself.
     */
    public IndexField withFilterable(Boolean filterable) {
        this.filterable = filterable;
        return this;
    }

    /**
     * Get enables using the field values in search response.
     *
     * @return the retrievable value
     */
    public Boolean retrievable() {
        return this.retrievable;
    }

    /**
     * Set enables using the field values in search response.
     *
     * @param retrievable the retrievable value to set
     * @return the IndexField object itself.
     */
    public IndexField withRetrievable(Boolean retrievable) {
        this.retrievable = retrievable;
        return this;
    }

    /**
     * Get enables text matching on the field.
     *
     * @return the searchable value
     */
    public Boolean searchable() {
        return this.searchable;
    }

    /**
     * Set enables text matching on the field.
     *
     * @param searchable the searchable value to set
     * @return the IndexField object itself.
     */
    public IndexField withSearchable(Boolean searchable) {
        this.searchable = searchable;
        return this;
    }

    /**
     * Get enables sorting results by the field.
     *
     * @return the sortable value
     */
    public Boolean sortable() {
        return this.sortable;
    }

    /**
     * Set enables sorting results by the field.
     *
     * @param sortable the sortable value to set
     * @return the IndexField object itself.
     */
    public IndexField withSortable(Boolean sortable) {
        this.sortable = sortable;
        return this;
    }

    /**
     * Get a label to use with the field.
     *
     * @return the fieldLabel value
     */
    public String fieldLabel() {
        return this.fieldLabel;
    }

    /**
     * Set a label to use with the field.
     *
     * @param fieldLabel the fieldLabel value to set
     * @return the IndexField object itself.
     */
    public IndexField withFieldLabel(String fieldLabel) {
        this.fieldLabel = fieldLabel;
        return this;
    }

    /**
     * Get a child list of fields.
     *
     * @return the fields value
     */
    public List<IndexField> fields() {
        return this.fields;
    }

    /**
     * Set a child list of fields.
     *
     * @param fields the fields value to set
     * @return the IndexField object itself.
     */
    public IndexField withFields(List<IndexField> fields) {
        this.fields = fields;
        return this;
    }

}
