/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.commerce.search.implementation;

import retrofit2.Retrofit;
import com.microsoft.bing.commerce.search.Searchs;
import com.google.common.reflect.TypeToken;
import com.microsoft.bing.commerce.search.models.CommerceSearchPostRequest;
import com.microsoft.bing.commerce.search.models.CommerceSearchResponse;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Searchs.
 */
public class SearchsImpl implements Searchs {
    /** The Retrofit service to perform REST calls. */
    private SearchsService service;
    /** The service client containing this operation class. */
    private BingCommerceSearchImpl client;

    /**
     * Initializes an instance of Searchs.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public SearchsImpl(Retrofit retrofit, BingCommerceSearchImpl client) {
        this.service = retrofit.create(SearchsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Searchs to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SearchsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.bing.commerce.search.Searchs post" })
        @POST("{tenant}/indexes/{index}")
        Observable<Response<ResponseBody>> post(@Path("tenant") String tenant, @Path("index") String index, @Body CommerceSearchPostRequest body);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.bing.commerce.search.Searchs get" })
        @GET("{tenant}/indexes/{index}")
        Observable<Response<ResponseBody>> get(@Path("tenant") String tenant, @Path("index") String index, @Query("mkt") String mkt, @Query("setlang") String setlang, @Query("q") String q, @Query("select") String select, @Query("orderby") String orderby, @Query("top") Integer top, @Query("skip") Integer skip, @Query("discoverfacets") Boolean discoverfacets, @Query("alteration") Boolean alteration, @Query("debug") Boolean debug, @Query("searchinstanceid") String searchinstanceid);

    }

    /**
     * Bing Commerce Custom Search Query.
     * POST requests accept complex search request options.
     *
     * @param body the CommerceSearchPostRequest value
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommerceSearchResponse object if successful.
     */
    public CommerceSearchResponse post(CommerceSearchPostRequest body, String tenant, String index) {
        return postWithServiceResponseAsync(body, tenant, index).toBlocking().single().body();
    }

    /**
     * Bing Commerce Custom Search Query.
     * POST requests accept complex search request options.
     *
     * @param body the CommerceSearchPostRequest value
     * @param tenant the String value
     * @param index the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommerceSearchResponse> postAsync(CommerceSearchPostRequest body, String tenant, String index, final ServiceCallback<CommerceSearchResponse> serviceCallback) {
        return ServiceFuture.fromResponse(postWithServiceResponseAsync(body, tenant, index), serviceCallback);
    }

    /**
     * Bing Commerce Custom Search Query.
     * POST requests accept complex search request options.
     *
     * @param body the CommerceSearchPostRequest value
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommerceSearchResponse object
     */
    public Observable<CommerceSearchResponse> postAsync(CommerceSearchPostRequest body, String tenant, String index) {
        return postWithServiceResponseAsync(body, tenant, index).map(new Func1<ServiceResponse<CommerceSearchResponse>, CommerceSearchResponse>() {
            @Override
            public CommerceSearchResponse call(ServiceResponse<CommerceSearchResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Bing Commerce Custom Search Query.
     * POST requests accept complex search request options.
     *
     * @param body the CommerceSearchPostRequest value
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommerceSearchResponse object
     */
    public Observable<ServiceResponse<CommerceSearchResponse>> postWithServiceResponseAsync(CommerceSearchPostRequest body, String tenant, String index) {
        if (body == null) {
            throw new IllegalArgumentException("Parameter body is required and cannot be null.");
        }
        if (tenant == null) {
            throw new IllegalArgumentException("Parameter tenant is required and cannot be null.");
        }
        if (index == null) {
            throw new IllegalArgumentException("Parameter index is required and cannot be null.");
        }
        Validator.validate(body);
        return service.post(tenant, index, body)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommerceSearchResponse>>>() {
                @Override
                public Observable<ServiceResponse<CommerceSearchResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommerceSearchResponse> clientResponse = postDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommerceSearchResponse> postDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommerceSearchResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommerceSearchResponse>() { }.getType())
                .build(response);
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommerceSearchResponse object if successful.
     */
    public CommerceSearchResponse get(String q, String tenant, String index) {
        return getWithServiceResponseAsync(q, tenant, index).toBlocking().single().body();
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommerceSearchResponse> getAsync(String q, String tenant, String index, final ServiceCallback<CommerceSearchResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(q, tenant, index), serviceCallback);
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommerceSearchResponse object
     */
    public Observable<CommerceSearchResponse> getAsync(String q, String tenant, String index) {
        return getWithServiceResponseAsync(q, tenant, index).map(new Func1<ServiceResponse<CommerceSearchResponse>, CommerceSearchResponse>() {
            @Override
            public CommerceSearchResponse call(ServiceResponse<CommerceSearchResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommerceSearchResponse object
     */
    public Observable<ServiceResponse<CommerceSearchResponse>> getWithServiceResponseAsync(String q, String tenant, String index) {
        if (q == null) {
            throw new IllegalArgumentException("Parameter q is required and cannot be null.");
        }
        if (tenant == null) {
            throw new IllegalArgumentException("Parameter tenant is required and cannot be null.");
        }
        if (index == null) {
            throw new IllegalArgumentException("Parameter index is required and cannot be null.");
        }
        final String mkt = null;
        final String setlang = null;
        final String select = null;
        final String orderby = null;
        final Integer top = null;
        final Integer skip = null;
        final Boolean discoverfacets = null;
        final Boolean alteration = null;
        final Boolean debug = null;
        final String searchinstanceid = null;
        return service.get(tenant, index, mkt, setlang, q, select, orderby, top, skip, discoverfacets, alteration, debug, searchinstanceid)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommerceSearchResponse>>>() {
                @Override
                public Observable<ServiceResponse<CommerceSearchResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommerceSearchResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @param mkt The market where the results come from. Thypically, `mkt` is the country where the user is making the request from.
     * @param setlang The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.
     * @param select A comma-separated list of fields to return. unspecified or empty to select only _itemId, or `*` to select all fields.
     * @param orderby A comma-separated list of OData order syntax expressions.
     * @param top The maximum count of items to return for pagination. Default is 24.
     * @param skip The offset to the first item to return for pagination. Default is 0.
     * @param discoverfacets Default value is false. When true, requests a facet discovery aggregation.
     * @param alteration A boolean flag to enable or disable query alteration. Default is true.
     * @param debug the Boolean value
     * @param searchinstanceid A saved search instance configuration to apply to current request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CommerceSearchResponse object if successful.
     */
    public CommerceSearchResponse get(String q, String tenant, String index, String mkt, String setlang, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid) {
        return getWithServiceResponseAsync(q, tenant, index, mkt, setlang, select, orderby, top, skip, discoverfacets, alteration, debug, searchinstanceid).toBlocking().single().body();
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @param mkt The market where the results come from. Thypically, `mkt` is the country where the user is making the request from.
     * @param setlang The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.
     * @param select A comma-separated list of fields to return. unspecified or empty to select only _itemId, or `*` to select all fields.
     * @param orderby A comma-separated list of OData order syntax expressions.
     * @param top The maximum count of items to return for pagination. Default is 24.
     * @param skip The offset to the first item to return for pagination. Default is 0.
     * @param discoverfacets Default value is false. When true, requests a facet discovery aggregation.
     * @param alteration A boolean flag to enable or disable query alteration. Default is true.
     * @param debug the Boolean value
     * @param searchinstanceid A saved search instance configuration to apply to current request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CommerceSearchResponse> getAsync(String q, String tenant, String index, String mkt, String setlang, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid, final ServiceCallback<CommerceSearchResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(q, tenant, index, mkt, setlang, select, orderby, top, skip, discoverfacets, alteration, debug, searchinstanceid), serviceCallback);
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @param mkt The market where the results come from. Thypically, `mkt` is the country where the user is making the request from.
     * @param setlang The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.
     * @param select A comma-separated list of fields to return. unspecified or empty to select only _itemId, or `*` to select all fields.
     * @param orderby A comma-separated list of OData order syntax expressions.
     * @param top The maximum count of items to return for pagination. Default is 24.
     * @param skip The offset to the first item to return for pagination. Default is 0.
     * @param discoverfacets Default value is false. When true, requests a facet discovery aggregation.
     * @param alteration A boolean flag to enable or disable query alteration. Default is true.
     * @param debug the Boolean value
     * @param searchinstanceid A saved search instance configuration to apply to current request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommerceSearchResponse object
     */
    public Observable<CommerceSearchResponse> getAsync(String q, String tenant, String index, String mkt, String setlang, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid) {
        return getWithServiceResponseAsync(q, tenant, index, mkt, setlang, select, orderby, top, skip, discoverfacets, alteration, debug, searchinstanceid).map(new Func1<ServiceResponse<CommerceSearchResponse>, CommerceSearchResponse>() {
            @Override
            public CommerceSearchResponse call(ServiceResponse<CommerceSearchResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Bing Commerce Basic Search Query.
     * GET requests can search an index using only URL parameters. Only limited request options are available. GET requests will always do simple item search and support only a default facet discovery aggregation.
     *
     * @param q The query to match against all eligible fields.
     * @param tenant the String value
     * @param index the String value
     * @param mkt The market where the results come from. Thypically, `mkt` is the country where the user is making the request from.
     * @param setlang The language to use for user interface strings. You may specify the language using either a 2-letter or 4-letter code. Using 4-letter codes is preferred.
     * @param select A comma-separated list of fields to return. unspecified or empty to select only _itemId, or `*` to select all fields.
     * @param orderby A comma-separated list of OData order syntax expressions.
     * @param top The maximum count of items to return for pagination. Default is 24.
     * @param skip The offset to the first item to return for pagination. Default is 0.
     * @param discoverfacets Default value is false. When true, requests a facet discovery aggregation.
     * @param alteration A boolean flag to enable or disable query alteration. Default is true.
     * @param debug the Boolean value
     * @param searchinstanceid A saved search instance configuration to apply to current request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CommerceSearchResponse object
     */
    public Observable<ServiceResponse<CommerceSearchResponse>> getWithServiceResponseAsync(String q, String tenant, String index, String mkt, String setlang, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid) {
        if (q == null) {
            throw new IllegalArgumentException("Parameter q is required and cannot be null.");
        }
        if (tenant == null) {
            throw new IllegalArgumentException("Parameter tenant is required and cannot be null.");
        }
        if (index == null) {
            throw new IllegalArgumentException("Parameter index is required and cannot be null.");
        }
        return service.get(tenant, index, mkt, setlang, q, select, orderby, top, skip, discoverfacets, alteration, debug, searchinstanceid)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CommerceSearchResponse>>>() {
                @Override
                public Observable<ServiceResponse<CommerceSearchResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CommerceSearchResponse> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CommerceSearchResponse> getDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CommerceSearchResponse, RestException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CommerceSearchResponse>() { }.getType())
                .build(response);
    }

}
