/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.commerce.search.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Defines an equivalence condition for a numeric field. It can appear in a
 * filter, a boost, or a filter aggregation.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "_type", defaultImpl = NumericCondition.class)
@JsonTypeName("NumericCondition")
public class NumericCondition extends FieldConditionBase {
    /**
     * The value to compare the field against.
     */
    @JsonProperty(value = "value")
    private Double value;

    /**
     * The comparison operator. Default is `gt`. Possible values include: 'Eq',
     * 'Ne', 'Gt', 'Lt', 'Ge', 'Le'.
     */
    @JsonProperty(value = "operator")
    private ComparisonOperator operator;

    /**
     * Get the value to compare the field against.
     *
     * @return the value value
     */
    public Double value() {
        return this.value;
    }

    /**
     * Set the value to compare the field against.
     *
     * @param value the value value to set
     * @return the NumericCondition object itself.
     */
    public NumericCondition withValue(Double value) {
        this.value = value;
        return this;
    }

    /**
     * Get the comparison operator. Default is `gt`. Possible values include: 'Eq', 'Ne', 'Gt', 'Lt', 'Ge', 'Le'.
     *
     * @return the operator value
     */
    public ComparisonOperator operator() {
        return this.operator;
    }

    /**
     * Set the comparison operator. Default is `gt`. Possible values include: 'Eq', 'Ne', 'Gt', 'Lt', 'Ge', 'Le'.
     *
     * @param operator the operator value to set
     * @return the NumericCondition object itself.
     */
    public NumericCondition withOperator(ComparisonOperator operator) {
        this.operator = operator;
        return this;
    }

}

