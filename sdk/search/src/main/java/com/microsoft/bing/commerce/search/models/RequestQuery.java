// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.commerce.search.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents the query that determines the result set. Note that query must
 * have a matchAll, value, or filter field. The matchAll and value fields
 * cannot both be present. You may create a query with only a filter to
 * **browse** (for example: a category).
 */
public class RequestQuery {
    /**
     * A query that matches against all searchable fields.
     */
    @JsonProperty(value = "matchAll")
    private String matchAll;

    /**
     * An instance of queryclausebase specifying search conditions. Its
     * mutually exclusive with matchall.
     */
    @JsonProperty(value = "value")
    private RequestQueryClauseBase value;

    /**
     * A filter to apply on the matching result set, or on all items if no
     * match is specified.
     */
    @JsonProperty(value = "filter")
    private ConditionBase filter;

    /**
     * The set of boosts to apply to the result set.
     */
    @JsonProperty(value = "boosts")
    private List<BoostExpression> boosts;

    /**
     * A boolean flag to enable or disable query alteration.
     */
    @JsonProperty(value = "alteration")
    private Boolean alteration;

    /**
     * A set of alternate terms (or phrases) that can be applied to request
     * query. The applied synonyms are used for both text-matching and
     * result-ranking stages of search.
     */
    @JsonProperty(value = "synonyms")
    private List<Synonym> synonyms;

    /**
     * Get a query that matches against all searchable fields.
     *
     * @return the matchAll value
     */
    public String matchAll() {
        return this.matchAll;
    }

    /**
     * Set a query that matches against all searchable fields.
     *
     * @param matchAll the matchAll value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withMatchAll(String matchAll) {
        this.matchAll = matchAll;
        return this;
    }

    /**
     * Get an instance of queryclausebase specifying search conditions. Its mutually exclusive with matchall.
     *
     * @return the value value
     */
    public RequestQueryClauseBase value() {
        return this.value;
    }

    /**
     * Set an instance of queryclausebase specifying search conditions. Its mutually exclusive with matchall.
     *
     * @param value the value value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withValue(RequestQueryClauseBase value) {
        this.value = value;
        return this;
    }

    /**
     * Get a filter to apply on the matching result set, or on all items if no match is specified.
     *
     * @return the filter value
     */
    public ConditionBase filter() {
        return this.filter;
    }

    /**
     * Set a filter to apply on the matching result set, or on all items if no match is specified.
     *
     * @param filter the filter value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withFilter(ConditionBase filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the set of boosts to apply to the result set.
     *
     * @return the boosts value
     */
    public List<BoostExpression> boosts() {
        return this.boosts;
    }

    /**
     * Set the set of boosts to apply to the result set.
     *
     * @param boosts the boosts value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withBoosts(List<BoostExpression> boosts) {
        this.boosts = boosts;
        return this;
    }

    /**
     * Get a boolean flag to enable or disable query alteration.
     *
     * @return the alteration value
     */
    public Boolean alteration() {
        return this.alteration;
    }

    /**
     * Set a boolean flag to enable or disable query alteration.
     *
     * @param alteration the alteration value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withAlteration(Boolean alteration) {
        this.alteration = alteration;
        return this;
    }

    /**
     * Get a set of alternate terms (or phrases) that can be applied to request query. The applied synonyms are used for both text-matching and result-ranking stages of search.
     *
     * @return the synonyms value
     */
    public List<Synonym> synonyms() {
        return this.synonyms;
    }

    /**
     * Set a set of alternate terms (or phrases) that can be applied to request query. The applied synonyms are used for both text-matching and result-ranking stages of search.
     *
     * @param synonyms the synonyms value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withSynonyms(List<Synonym> synonyms) {
        this.synonyms = synonyms;
        return this;
    }

}
